---
import { Schema } from "astro-seo-schema"

import type { SelectArticle } from "@/server/db/schema"
import {
  publicLogoOgUrl,
  publicSiteTitle,
  publicSiteUrl,
} from "@/utils/constant"

interface Props {
  article: Pick<
    SelectArticle,
    "createdAt" | "updatedAt" | "title" | "excerpt" | "featuredImage" | "slug"
  > & {
    authors: { username: string | null }[]
  }
}

const { article } = Astro.props
const { createdAt, updatedAt, title, excerpt, featuredImage, slug, authors } =
  article

// Helper function to safely format dates
const formatDate = (
  date: Date | string | null | undefined,
): string | undefined => {
  if (!date) return undefined

  try {
    if (date instanceof Date) {
      return date.toISOString()
    }
    if (typeof date === "string") {
      // Try to parse as ISO string or create new Date
      const parsed = new Date(date)
      if (!isNaN(parsed.getTime())) {
        return parsed.toISOString()
      }
    }
  } catch (error) {
    console.warn("Failed to format date:", error)
  }

  return undefined
}
---

<Schema
  item={{
    "@context": "https://schema.org",
    "@type": "Article",
    datePublished: formatDate(createdAt),
    description: excerpt,
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": `${publicSiteUrl}/article/${slug}`,
    },
    headline: title,
    image: [
      {
        "@type": "ImageObject",
        url: featuredImage,
      },
    ],
    dateModified: formatDate(updatedAt),
    author: [
      {
        "@type": "Person",
        name: publicSiteTitle,
        url: `${publicSiteUrl}/user/${authors[0].username}`,
      },
    ],
    publisher: {
      "@type": "Organization",
      name: publicSiteTitle,
      logo: {
        "@type": "ImageObject",
        url: publicLogoOgUrl,
      },
    },
    isAccessibleForFree: true,
  }}
/>
